{"version":3,"sources":["logo.svg","components/Form.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","API_SERVERS","Form","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleSubmit","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","e","i","wrap","_context","prev","next","preventDefault","state","servers","fetch","concat","then","response","json","data","hvvServers","filter","s","mods","length","mode","requiresPassword","proxy","name","console","log","stop","_x","apply","arguments","bind","assertThisInitialized","react_default","createElement","onSubmit","className","type","value","React","Component","App","src","alt","components_Form","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,wNCElCC,EAAc,qCAmDLC,cAhDX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAWVQ,aAZmB,eAAAC,EAAAP,OAAAQ,EAAA,EAAAR,CAAAS,EAAAC,EAAAC,KAYJ,SAAAC,EAAOC,GAAP,IAAAC,EAAA,OAAAL,EAAAC,EAAAK,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACXL,EAAEM,iBAEFpB,EAAKqB,MAAMC,QAAU,GACbP,EAAI,EAJD,YAIIA,EAAI,GAJR,CAAAE,EAAAE,KAAA,eAAAF,EAAAE,KAAA,EAKJI,MAAK,GAAAC,OAAI3B,GAAJ2B,OAAkBT,IAC3BU,KAAK,SAACC,GACL,OAAOA,EAASC,SAEjBF,KAAK,SAACG,GACL,IAAIC,EAAaD,EAAKN,QAAQQ,OAAO,SAAAC,GAAC,OAAIA,EAAEC,KAAKC,OAAS,GAAKF,EAAEC,KAAKC,OAAS,IAAiB,yBAAXF,EAAEG,OAAoCH,EAAEI,mBAAsC,cAAjBJ,EAAEK,MAAMC,MAAyC,WAAjBN,EAAEK,MAAMC,QAE1LrC,EAAKqB,MAAMC,QAAUtB,EAAKqB,MAAMC,QAAQE,OAAOK,KAZxC,OAIWd,IAJXE,EAAAE,KAAA,eAeXmB,QAAQC,IAAI,uBACZD,QAAQC,IAAIvC,EAAKqB,MAAMC,SAhBZ,yBAAAL,EAAAuB,SAAA3B,MAZI,gBAAA4B,GAAA,OAAAjC,EAAAkC,MAAAvC,KAAAwC,YAAA,GAEf3C,EAAKqB,MAAQ,CAAEC,QAAS,IAExBtB,EAAKO,aAAeP,EAAKO,aAAaqC,KAAlB3C,OAAA4C,EAAA,EAAA5C,CAAAD,IAJLA,wEAmCf,OACI8C,EAAAnC,EAAAoC,cAAA,QAAMC,SAAU7C,KAAKI,cACjBuC,EAAAnC,EAAAoC,cAAA,SAAOE,UAAU,gBAAgBC,KAAK,SAASC,MAAM,YACrDL,EAAAnC,EAAAoC,cAAA,kBAvCGK,IAAMC,WCcVC,MAZf,WAEE,OACER,EAAAnC,EAAAoC,cAAA,OAAKE,UAAU,OACbH,EAAAnC,EAAAoC,cAAA,UAAQE,UAAU,cAChBH,EAAAnC,EAAAoC,cAAA,OAAKQ,IAAI,4BAA4BN,UAAU,WAAWO,IAAI,SAC9DV,EAAAnC,EAAAoC,cAACU,EAAD,SCAYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlB,EAAAnC,EAAAoC,cAACkB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7C,KAAK,SAAA8C,GACjCA,EAAaC","file":"static/js/main.9a843c15.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\r\n\r\nconst API_SERVERS = \"https://kyber.gg/api/servers?page=\";\r\n\r\nclass Form extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { servers: [] };\r\n\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    // onChange(e) {\r\n    //     var val = e.target.value;\r\n    //     this.setState({ name: val });\r\n    // }\r\n\r\n    handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n\r\n        this.state.servers = [];\r\n        for(var i = 1; i < 5; i++){\r\n         await fetch(`${API_SERVERS}${i}`)\r\n          .then((response) => {\r\n            return response.json();\r\n          })\r\n          .then((data) => {\r\n            let hvvServers = data.servers.filter(s => s.mods.length > 0 && s.mods.length < 10 && s.mode === \"HeroesVersusVillains\" && !s.requiresPassword && (s.proxy.name === \"Frankfurt\" || s.proxy.name === \"London\"));\r\n            // console.log(hvvServers);\r\n            this.state.servers = this.state.servers.concat(hvvServers);\r\n          });\r\n        }\r\n        console.log(\"Found HVV servers: \");\r\n        console.log(this.state.servers);\r\n        // servers;\r\n\r\n        // console.log(\"Имя: \" + this.state.name);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.handleSubmit}>\r\n                <input className=\"submit-button\" type=\"submit\" value=\"Refresh\" />\r\n                <p>\r\n                    {/* <label>Имя:</label><br />\r\n                    <input type=\"text\" value={this.state.name} onChange={this.onChange} /> */}\r\n                </p>\r\n                \r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Form;","import React from \"react\";\r\nimport logo from \"./logo.svg\";\r\nimport \"./App.css\";\r\n\r\nimport Form from \"./components/Form\";\r\n\r\nfunction App() {\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <img src=\"https://kyber.gg/logo.svg\" className=\"App-logo\" alt=\"logo\" />\r\n        <Form />\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}