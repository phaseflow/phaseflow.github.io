{"version":3,"sources":["serviceWorker.js","Part10/components/Tracklist.jsx","Part10/App.jsx","TODO/components/TodoItem.jsx","TODO/data/todosData.js","TODO/layout/MainContent.jsx","TODO/layout/Header.jsx","Root/RootComponent.jsx","index.js"],"names":["Boolean","window","location","hostname","match","parseName","name","includes","split","Tracklist","_ref","tracklist","properties","informal","react_default","a","createElement","className","class","tracklistname","uid","id_tracklist","id_unique","tracklistFullUrl","url_name","is_live","concat","href","target","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","character","loading","tracklists","innerHtml","handleChange","bind","assertThisInitialized","event","_this2","searchTerm","value","length","setState","searchPhrase","fetch","then","response","json","data","console","log","text","Fragment","src","alt","type","placeholder","onChange","map","index","components_Tracklist","key","Component","completedStyle","fontStyle","color","textDecoration","TodoItem","props","checked","item","completed","e","id","style","todosData","RootComponent","Part10_App","ReactDOM","render","Root_RootComponent","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.59a772a8.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nconst Tracklist = ({ tracklist }) => {\r\n    const properties = tracklist.properties;\r\n    const informal = tracklist.informal;\r\n\r\n    if (!!tracklist.informal || !properties){\r\n        return (\r\n            <div className=\"tracklistEntity\">\r\n                <p class=\"tracklistEntityContent\">{tracklist.informal}</p>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const tracklistUrlPrefix = \"https://1001.tl/\";\r\n\r\n    const name = properties.tracklistname; // str\r\n    const id = properties.id_tracklist; // str\r\n    const uid = properties.id_unique; // str, this one used to create valid request\r\n    const urlName = properties.url_name; // str\r\n    const isLive = properties.is_live; // bool\r\n\r\n    const tracklistFullUrl = `${tracklistUrlPrefix}${uid}`;\r\n\r\n    return (\r\n        <a href={tracklistFullUrl} target=\"_blank\" className=\"tracklist\">\r\n            <div className=\"tracklistEntity\">   \r\n                <p class=\"tracklistEntityContent\"> \r\n                    <strong className=\"author\">{parseName(name)[0]}</strong>{\" – \" + parseName(name)[1]}   \r\n                </p>\r\n            </div>\r\n        </a>\r\n    )\r\n}\r\n\r\nconst parseName = (name) => {\r\n    if (name.includes(\" @ \")){\r\n        const parts = name.split(\" @ \");\r\n        return parts;\r\n    }\r\n\r\n    if (name.includes(\" - \")){\r\n        const parts = name.split(\" - \");\r\n        return parts;\r\n    }\r\n\r\n    \r\n\r\n    const parts = [name, \"\"]\r\n}\r\n\r\nexport default Tracklist","import React, { Component } from \"react\";\r\nimport Tracklist from './components/Tracklist'\r\nimport './index.css';\r\n\r\nconst TRACKLISTS = 'https://www.1001tracklists.com/ajax/search_tracklist.php?noIDFieldCheck=true&fixedMode=true&sf=p';\r\nconst TERM = '&p=';\r\nconst MAINIMAGE = 'http://www.phaseflow.ru/images/logo16T2560.png';\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      character: {},\r\n      // searchTerm: \"\",\r\n      loading: false,\r\n      tracklists: [],\r\n      innerHtml: \"\",\r\n    };\r\n\r\n    this.handleChange = this.handleChange.bind(this)\r\n  }\r\n\r\n  handleChange(event) {\r\n    const searchTerm = event.target.value;\r\n    if (searchTerm.length > 2) {\r\n      this.setState({\r\n        searchPhrase: event.target.value,\r\n        loading: true,\r\n      });\r\n      fetch(`${TRACKLISTS}${TERM}${searchTerm}`)\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        console.log(data.data);\r\n        this.setState({\r\n          tracklists: data.data,\r\n          loading: false,\r\n        });\r\n      });\r\n    }\r\n    else {\r\n      this.setState({\r\n        searchPhrase: \"\",\r\n        loading: false,\r\n        tracklists: [],\r\n      })\r\n    }\r\n    \r\n}\r\n\r\n  componentDidMount() {    \r\n    console.log(\"Component did mount! Processing APIs...\");\r\n    //this.setState({loading: true});\r\n    // fetch(`${SW_API}people/10/`)\r\n    //   .then(response => response.json())\r\n    //   .then(data => {\r\n    //     console.log(data);\r\n    //     this.setState({\r\n    //       character: data,\r\n    //       loading: false,\r\n    //     })\r\n    //   });\r\n  }\r\n\r\n  render() {\r\n    console.log('Component is rendering...')\r\n    const text = this.state.loading ? 'Loading...' : (this.state.tracklists.length > 0 && 'Done!');\r\n    return (\r\n      <>\r\n        <div className=\"part10c\">\r\n          <img className=\"pic\" src={MAINIMAGE} alt=\"imgtext\" />\r\n          <h3>{text}</h3>\r\n        </div>\r\n        <div className=\"form\">\r\n          <form>\r\n                <input type=\"text\" placeholder=\"Search tracklists...\" onChange={this.handleChange} className=\"searchInput\" />\r\n                <h2>{!!this.state.searchPhrase && !this.state.loading && `Results of '${this.state.searchPhrase}':`}</h2>\r\n          </form>\r\n        </div>\r\n        <div>\r\n          {!this.state.loading && this.state.tracklists && \r\n            this.state.tracklists.map((tracklist, index ) => {\r\n              return (\r\n                <Tracklist key={index} tracklist={tracklist} />\r\n              )\r\n            })\r\n          }\r\n        </div>\r\n        {/* <div dangerouslySetInnerHTML={this.state.innerHtml} /> */}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\nexport default App","import React from 'react';\r\n\r\nconst completedStyle = {\r\n  fontStyle: \"italic\",\r\n  color: \"#cdcdcd\",\r\n  textDecoration: \"line-through\"\r\n}\r\n\r\nconst TodoItem = (props) => (\r\n  <div className=\"todo-item\">\r\n    <input \r\n      type=\"checkbox\" \r\n      checked={props.item.completed} \r\n      onChange={(e) => props.handleChange(props.item.id)}/>\r\n    <p style={props.item.completed ? completedStyle : null}>{props.item.text}</p>\r\n  </div>\r\n);\r\n\r\nexport default TodoItem;","const todosData = [\r\n    {\r\n        id: 1,\r\n        text: \"Take out the trash\",\r\n        completed: true\r\n    },\r\n    {\r\n        id: 2,\r\n        text: \"Grocery shopping\",\r\n        completed: false\r\n    },\r\n    {\r\n        id: 3,\r\n        text: \"Clean gecko tank\",\r\n        completed: false\r\n    },\r\n    {\r\n        id: 4,\r\n        text: \"Mow lawn\",\r\n        completed: true\r\n    },\r\n    {\r\n        id: 5,\r\n        text: \"Catch up on Arrested Development\",\r\n        completed: false\r\n    }\r\n]\r\n\r\nexport default todosData","import React, { Component } from 'react';\r\nimport TodoItem from '../components/TodoItem';\r\nimport todosData from '../data/todosData';\r\n\r\nclass MainContent extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            todos: todosData,\r\n        };\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    handleChange(id){\r\n        this.setState(prevState => {\r\n            // get previous state\r\n            const previousState = Object.assign({}, prevState);\r\n\r\n            // process state (update previous state)\r\n            const updatedTodos = previousState.todos.map(todo => {\r\n                if (todo.id === id){\r\n                    todo.completed = !todo.completed;\r\n                }\r\n                return todo;\r\n            });\r\n\r\n            // update current state\r\n            return {\r\n                todos: updatedTodos\r\n            }            \r\n        });\r\n\r\n        \r\n    }\r\n\r\n    render(){\r\n        // Time of day!\r\n        const styles = {\r\n            fontSize: 30,\r\n            margin: \"10px\"\r\n          }\r\n        const timeOfDay = getTimeOfDay(styles);\r\n\r\n        // TODO App\r\n        const todoItems = this.state.todos && this.state.todos.map(\r\n            (item) => (<TodoItem key={item.id} item={item} handleChange={this.handleChange} />)\r\n        );\r\n        return (\r\n            <main className=\"main\">\r\n                <h1 style={styles}>Good {timeOfDay}!</h1>\r\n                <p>This is where most of my content will go...</p> \r\n                <div className=\"todo-list\"> \r\n                    {todoItems}\r\n                </div>         \r\n            </main>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MainContent;\r\n\r\nfunction getTimeOfDay(styles) {\r\n    const date = new Date()\r\n    const hours = date.getHours()\r\n\r\n    let timeOfDay\r\n\r\n    if (hours < 12) {\r\n        timeOfDay = \"morning\"\r\n        styles.color = \"#04756F\"\r\n    }\r\n    else if (hours >= 12 && hours < 17) {\r\n        timeOfDay = \"afternoon\"\r\n        styles.color = \"#2E0927\"\r\n    }\r\n    else {\r\n        timeOfDay = \"night\"\r\n        styles.color = \"#D90000\"\r\n    }\r\n\r\n    return timeOfDay;\r\n}","import React from 'react';\r\nimport '../styles.css'\r\n\r\nconst Header = () => {\r\n    return (\r\n        <header className=\"navbar\">\r\n            This is the header\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n// import { BrowserRouter } from 'react-router-dom';\r\nimport './styles.css';\r\n\r\nimport { default as Part10 } from '../Part10/App';\r\n\r\nimport { default as TodoApp } from '../TODO/App'\r\n\r\nconst isToDo = 0;\r\nconst RootComponent = (props) => {\r\n  return (\r\n    <>\r\n      {isToDo\r\n        ? (<TodoApp />)\r\n        : (<div className=\"centered\">\r\n          {/* <Part1 /><hr/> */}\r\n          {/* <Part2 name=\"Egor\" bio=\"Man, student, programmer, podcaster and good guy\" countries={['San-Marino', 'Egypt', 'Spain']} /> <hr/> */}\r\n          {/* <BrowserRouter>\r\n            <Part3 />\r\n          </BrowserRouter>           */}\r\n          {/* <Part4 /> */}\r\n          {/* <Part6 /> */}\r\n          {/* <Part7 /> */}\r\n          {/* <Part8 logged={true} /> */}\r\n          {/* <Part9 /> */}\r\n          <Part10 />\r\n          {/* <Part11 /> */}\r\n        </div>)}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default RootComponent;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n// import App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport RootComponent from './Root/RootComponent';\r\n\r\n//ReactDOM.render(<App />, document.getElementById('root'));\r\nReactDOM.render(<RootComponent />, document.getElementById('root'))\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}